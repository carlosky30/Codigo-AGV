/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  //Sensores
  uint32_t numTicks1 = 0;
  uint32_t numTicks2 = 0;
  uint32_t numTicks3 = 0;
  uint32_t numTicks4 = 0;
  uint32_t numTicks5 = 0;

  float distancia1;
  float distancia2;
  float distancia3;
  float distancia4;
  float distancia5;

  const float Vsonido = 0.0343f; //cm/us
  char uartBuf[50];

  #define Sensor1_PORT GPIOC
  #define Sensor1_PIN  GPIO_PIN_5

  #define Sensor2_PORT GPIOC
  #define Sensor2_PIN  GPIO_PIN_6

  #define Sensor3_PORT GPIOC
  #define Sensor3_PIN  GPIO_PIN_8

  #define Sensor4_PORT GPIOC
  #define Sensor4_PIN  GPIO_PIN_9

  #define Sensor5_PORT GPIOB
  #define Sensor5_PIN  GPIO_PIN_8

  #define Sensor6_PORT GPIOB
  #define Sensor6_PIN  GPIO_PIN_9


    // Sensor ultrasonico
  #define Sensor10_PORT GPIOB
  #define Sensor10_PIN  GPIO_PIN_0

  #define Sensor11_PORT GPIOB
  #define Sensor11_PIN  GPIO_PIN_1

  #define Sensor12_PORT GPIOB
  #define Sensor12_PIN  GPIO_PIN_4

  #define Sensor13_PORT GPIOB
  #define Sensor13_PIN  GPIO_PIN_5

  #define Sensor14_PORT GPIOB
  #define Sensor14_PIN  GPIO_PIN_6

  #define Sensor15_PORT GPIOB
  #define Sensor15_PIN  GPIO_PIN_7


  // Switch
  #define Sensor20_PORT GPIOA
  #define Sensor20_PIN  GPIO_PIN_10


       //Iniciar PWM
         HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
         HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

         // Puente H
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);\
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);

         GPIO_TypeDef* echoPorts[5] = {GPIOB, GPIOB, GPIOB, GPIOB, GPIOB};
         uint16_t echoPins[5] = {GPIO_PIN_1, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7};

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Sensores seguidores
		  GPIO_PinState sensorState1 = HAL_GPIO_ReadPin (Sensor1_PORT, Sensor1_PIN);
		  GPIO_PinState sensorState2 = HAL_GPIO_ReadPin (Sensor2_PORT, Sensor2_PIN);
		  GPIO_PinState sensorState3 = HAL_GPIO_ReadPin (Sensor3_PORT, Sensor3_PIN);
		  GPIO_PinState sensorState4 = HAL_GPIO_ReadPin (Sensor4_PORT, Sensor4_PIN);
		  GPIO_PinState sensorState5 = HAL_GPIO_ReadPin (Sensor5_PORT, Sensor5_PIN);
		  GPIO_PinState sensorState6 = HAL_GPIO_ReadPin (Sensor6_PORT, Sensor6_PIN);


		  // ultrasonico
		  GPIO_PinState sensorStateTrig1 = HAL_GPIO_ReadPin (Sensor10_PORT, Sensor10_PIN);
		  GPIO_PinState sensorStateEcho1 = HAL_GPIO_ReadPin (Sensor11_PORT, Sensor11_PIN);
		  GPIO_PinState sensorStateEcho2 = HAL_GPIO_ReadPin (Sensor12_PORT, Sensor12_PIN);
		  GPIO_PinState sensorStateEcho3 = HAL_GPIO_ReadPin (Sensor13_PORT, Sensor13_PIN);
		  GPIO_PinState sensorStateEcho4 = HAL_GPIO_ReadPin (Sensor14_PORT, Sensor14_PIN);
		  GPIO_PinState sensorStateEcho5 = HAL_GPIO_ReadPin (Sensor15_PORT, Sensor15_PIN);

		  // Switch
		  GPIO_PinState sensorStateSw = HAL_GPIO_ReadPin (Sensor20_PORT, Sensor20_PIN);

		  //Distancia 1
		  //Trig en bajo
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // PA0 Trig Bajo
		  delay_us(3);

		  //Pulso de 10 us
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		  delay_us(10);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET);  // Esperar ECHO alto
		  numTicks1 = 0;

		  // Esperamos el ECHO
		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_SET)
		  {
			  numTicks1++;
			  delay_us(2); // Aproximadamente 2.8 us
		  }

		  // Calcular distancias
		  distancia1 = (numTicks1 * 2.8f) *Vsonido/2;

		  sprintf(uartBuf, "Distancia (cm) = %.1f\r\n", distancia1);
		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);

		  HAL_Delay(1000);

		  //Distancia 2
		  //Trig en bajo
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); // PA0 Trig Bajo
		  delay_us(3);

		  //Pulso de 10 us
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		  delay_us(10);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);

		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET);  // Esperar ECHO alto
		  numTicks2 = 0;

		  // Esperamos el ECHO
		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
		  {
			  numTicks2++;
			  delay_us(2); // Aproximadamente 2.8 us
		  }

		  // Calcular distancias
		  distancia2 = (numTicks2 * 2.8f) *Vsonido/2;

		  sprintf(uartBuf, "Distancia (cm) = %.1f\r\n", distancia2);
		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);

		  HAL_Delay(1000);

		  //Distancia 3
		  //Trig en bajo
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // PA0 Trig Bajo
		  delay_us(3);

		  //Pulso de 10 us
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		  delay_us(10);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);

		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET);  // Esperar ECHO alto
		  numTicks3 = 0;

		  // Esperamos el ECHO
		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
		  {
			  numTicks3++;
			  delay_us(2); // Aproximadamente 2.8 us
		  }

		  // Calcular distancias
		  distancia3 = (numTicks3 * 2.8f) *Vsonido/2;

		  sprintf(uartBuf, "Distancia (cm) = %.1f\r\n", distancia3);
		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);

		  HAL_Delay(1000);

		  if (sensorStateSw == GPIO_PIN_SET)
		  {
			if ((distancia1 > 10.0f) && (distancia2 > 10.0f) && (distancia3 > 10.0f) && (distancia4 > 10.0f) && (distancia5 > 10.0f))
			{
			  if ((sensorState1 == GPIO_PIN_SET) && (sensorState2 == GPIO_PIN_SET) && (sensorState3 == GPIO_PIN_SET) && (sensorState4 == GPIO_PIN_SET) && (sensorState5 == GPIO_PIN_SET) && (sensorState6 == GPIO_PIN_SET))
			  {
				  // Linea Negra (No reflexion)
			  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50);
			  	  sprintf (uartBuf, "R-S-R");
			  	  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 100);
			  }

			  else if ((sensorState1 == GPIO_PIN_SET) && (sensorState2 == GPIO_PIN_SET) && (sensorState3 == GPIO_PIN_SET) && (sensorState4 == GPIO_PIN_SET) && (sensorState5 == GPIO_PIN_SET) && (sensorState6 == GPIO_PIN_SET))
			  {
				  //Fondo Blanco (Reflexion)
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
			  	  sprintf (uartBuf, "S-R-R");
			  	  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 100);
			  }

			  else if ((sensorState1 == GPIO_PIN_SET) && (sensorState2 == GPIO_PIN_SET) && (sensorState3 == GPIO_PIN_SET) && (sensorState4 == GPIO_PIN_SET) && (sensorState5 == GPIO_PIN_SET) && (sensorState6 == GPIO_PIN_SET))
			  {
				  //Fondo Blanco (Reflexion)
			  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50);
			  	  sprintf (uartBuf, "R-R-S");
			  	  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 100);
			  }

			  else if ((sensorState1 == GPIO_PIN_SET) && (sensorState2 == GPIO_PIN_SET) && (sensorState3 == GPIO_PIN_SET) && (sensorState4 == GPIO_PIN_SET) && (sensorState5 == GPIO_PIN_SET) && (sensorState6 == GPIO_PIN_SET))
			  {
				  // Nada se mueve
			  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
			  	  sprintf (uartBuf, "R-R-R");
			  	  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 100);
			  }

			  else
			  {
				  sprintf(uartBuf, "Programa bien Bitch");
				  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 100);
			  }
			}

			else
			{
			  sprintf(uartBuf, "Programa bien Bitch");
			  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 100);
			}
		  }

		  else if (sensorStateSw == GPIO_PIN_RESET)
		  {
			  // Bluethood

		  }

		  else
		  {
			  sprintf(uartBuf, "Programa bien Bitch");
			  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 100);
		  }
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA1 PA4 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us)
{
	if (us < 2) us = 2;
	TIM4 -> ARR = us -1; // Pone el valor de ARR
	TIM4 -> EGR = 1; // Reiniciamos el timer
	TIM4 -> SR &= ~1; // Reiniciar la badera
	TIM4 -> CR1 |=1; // Iniciamos el contador
	while ((TIM4-> SR&0x0001) !=1); // Esperams a cumplir un ciclo entero
	TIM4 -> SR &= ~(0x0001); // Señal para contar microsegundos
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
